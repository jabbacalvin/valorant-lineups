<%- include('../partials/header') %>

<div class="container-fluid text-center">
  <div class="clearfix">
    <div class="row">
      <div class="col-lg-5 col-md-5">
        <div class="row">
          <div id="map-banner-container">
            <div id="map-banner" class="map-banner">
              <div class="map-title">
                <h1 class="text-uppercase p-4"><%= map.name %></h1>
              </div>
            </div>
          </div>
        </div>
        <div id="agents-container" class="row p-3">
          <% agents.forEach(function(a) { %>
          <div class="agent-image-container col-sm-2 p-2">
            <button class="agent-button" type="submit" data-id="<%= a._id %>">
              <img
                src="<%= a.icon %>"
                class="agent-image rounded img-fluid"
                alt="<%= a.name %>"
              />
            </button>
          </div>
          <% }); %>
        </div>
        <div class="row">
          <div id="abilities-container">
            <h1 class="text-white">ABILITIES</h1>
            <div id="abilities-img-container"></div>
          </div>
        </div>
        <hr class="border border-white border-2 opacity-50">
        <div class="row">
          <div id="lineup-container" data-bs-theme="dark">
            <h1 class="text-white">LINEUP</h1>
            <table class="table" id="lineup-table">
              <thead>
                <tr>
                  <th scope="col">Name</th>
                  <th scope="col">Ability</th>
                  <th scope="col">Images</th>
                  <th scope="col">Video</th>
                </tr>
              </thead>
              <tbody>
              </tbody>
            </table>
          </div>
        </div>
      </div>
      <div class="col-lg-7 col-md-7">
        <div id="canvas-container">
          <img
            id="minimap-img"
            src="<%= map.minimap %>"
            alt="<%= map.name %>"
            hidden
          />
          <canvas id="minimap-canvas"></canvas>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  const mapBanner = document.getElementById("map-banner");
  mapBanner.style.backgroundImage =
    "linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.2) 50%, rgba(0, 0, 0, 0.2) 50%, rgba(0, 0, 0, 0) 100%), url(<%= map.image %>)";

  const canvas = document.getElementById("minimap-canvas");
  const ctx = canvas.getContext("2d");
  const anchorPairs = [];
  let hasAnchorPairBeenAdded = false;
  let isDragging = false;
  let selectedAnchorPairIndex = -1;
  let selectedAnchorIndex = -1;
  let scale = 1;
  let totalTranslation = { x: 0, y: 0 };

  const image = new Image();
  image.onload = drawImageAndAnchors;
  image.src = document.getElementById("minimap-img").src;

  const agentsEl = document.getElementById("agents-container");
  const agentEl = document.querySelectorAll(".agent-image");
  const abilitiesEl = document.getElementById("abilities-container");
  const abilitiesImgEl = document.getElementById("abilities-img-container");
  const lineupEl = document.getElementById("lineup-container");
  const lineupTableEl = document.getElementById("lineup-table");
  agentsEl.addEventListener("click", async function (e) {
    if (e.target.nodeName === "IMG") {
      abilitiesImgEl.innerHTML = "";
      lineupEl.style.visibility = "hidden";
      anchorPairs.length = 0;
      selectedAnchorPairIndex = -1;
      drawImageAndAnchors();
      agentEl.forEach((e) => e.classList.remove("agent-image-focus"));
      e.target.classList.toggle("agent-image-focus");
      const agentId = e.target.parentElement.dataset.id;
      const mapId = "<%= map._id %>";

      let response1 = await fetch(`/api/agents/${agentId}`);
      let response2 = await fetch(`/api/lineups/${mapId}/${agentId}`);

      let agentAbilities = await response1.json();
      let lineups = await response2.json();
      abilitiesEl.style.visibility = "visible";
      agentAbilities.forEach(function (a) {
        abilitiesImgEl.innerHTML += `<img src="${a.icon}" class="abilities-icon image-fluid" data-id="${a._id}" alt="${a.name}" >`;
      });
      abilitiesImgEl.classList.add("col-12");

      // call function to pass data to minimap
      let lineupId, startX, startY, endX, endY;
      lineups.forEach(function (l) {
        lineupId = l._id;
        startX = l.coordinates[0].x;
        startY = l.coordinates[0].y;
        endX = l.coordinates[1].x;
        endY = l.coordinates[1].y;
        addAnchorPair(lineupId, startX, startY, endX, endY);
      });
    }
  });

  function drawImageAndAnchors() {
    const { naturalWidth, naturalHeight } = image;
    canvas.width = naturalWidth;
    canvas.height = naturalHeight;

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    ctx.save();

    ctx.translate(totalTranslation.x, totalTranslation.y);
    ctx.scale(scale, scale);
    ctx.translate(-totalTranslation.x, -totalTranslation.y);

    ctx.drawImage(image, 0, 0);
    drawAnchorPairs();

    ctx.restore();
  }

  function drawAnchorPairs() {
    anchorPairs.forEach((pair, pairIndex) => {
      const anchor1 = pair.anchor1;
      const anchor2 = pair.anchor2;
      const isSelected = pairIndex === selectedAnchorPairIndex;

      ctx.beginPath();
      ctx.moveTo(anchor1.x, anchor1.y);
      ctx.lineTo(anchor2.x, anchor2.y);
      ctx.strokeStyle = isSelected ? "orange" : pair.lineColor;
      ctx.lineWidth = 2 / scale; // adjust line width with the scale
      ctx.stroke();

      [anchor1, anchor2].forEach((anchor) => {
        if (anchor.isVisible) {
          ctx.fillStyle = isSelected ? "orange" : anchor.color;
          ctx.beginPath();
          ctx.arc(anchor.x, anchor.y, 10 / scale, 0, 2 * Math.PI); // adjust the anchor radius with the scale
          ctx.fill();
        }
      });
    });
  }
  function addAnchorPair(lineupId, startX, startY, endX, endY, icon) {
    const newAnchorPair = {
      anchor1: { x: startX, y: startY, color: "lightgreen", isVisible: true },
      anchor2: { x: endX, y: endY, color: "red", isVisible: true },
      lineColor: "black",
      lineupId: lineupId,
    };
    anchorPairs.push(newAnchorPair);
    drawImageAndAnchors();
  }

  function getMousePos(evt) {
    const rect = canvas.getBoundingClientRect();
    const scaleX = canvas.width / rect.width / scale; // incorporate the scale
    const scaleY = canvas.height / rect.height / scale; // incorporate the scale

    return {
      x: (evt.clientX - rect.left) * scaleX - totalTranslation.x / scale,
      y: (evt.clientY - rect.top) * scaleY - totalTranslation.y / scale,
    };
  }

  function handleMouseDown(evt) {
    const mousePos = getMousePos(evt);
    isDragging = false; // initialize isDragging as false

    for (let pairIndex = 0; pairIndex < anchorPairs.length; pairIndex++) {
      // use a for loop instead of forEach
      const { anchor1, anchor2 } = anchorPairs[pairIndex];

      if (
        Math.abs(mousePos.x - anchor1.x) <= 10 / scale && // Adjusted for anchor point size and scale
        Math.abs(mousePos.y - anchor1.y) <= 10 / scale
      ) {
        isDragging = false;
        selectedAnchorPairIndex = pairIndex;
        selectedAnchorIndex = 0;
        break; // break the loop
      } else if (
        Math.abs(mousePos.x - anchor2.x) <= 10 / scale && // Adjusted for anchor point size and scale
        Math.abs(mousePos.y - anchor2.y) <= 10 / scale
      ) {
        isDragging = false;
        selectedAnchorPairIndex = pairIndex;
        selectedAnchorIndex = 1;
        break; // break the loop
      }
    }
  }

  function handleMouseMove(evt) {
    if (!isDragging) return;

    const mousePos = getMousePos(evt);
    const pair = anchorPairs[selectedAnchorPairIndex];
    const anchor = pair[selectedAnchorIndex === 0 ? "anchor1" : "anchor2"];

    anchor.x = mousePos.x;
    anchor.y = mousePos.y;

    drawImageAndAnchors();
  }

  function handleClick(evt) {
    const mousePos = getMousePos(evt);

    for (let pairIndex = 0; pairIndex < anchorPairs.length; pairIndex++) {
      const { anchor1, anchor2 } = anchorPairs[pairIndex];

      const distToAnchor1 = distance(mousePos, anchor1);
      const distToAnchor2 = distance(mousePos, anchor2);

      if (distToAnchor1 <= 10 / scale || distToAnchor2 <= 10 / scale) {
        selectedAnchorPairIndex = pairIndex;

        // draw the image and anchor pairs again to reflect the selection
        drawImageAndAnchors();
        lineupEl.style.visibility = "visible";

        (async function () {
          let response1 = await fetch(`/api/lineups/${anchorPairs[selectedAnchorPairIndex].lineupId}`);
          let lineup = await response1.json();
          let response2 = await fetch(`/api/agents/${lineup.agent._id}`);
          let abilities = await response2.json();
          lineupTableEl.tBodies[0].innerHTML = 
          `<tr>
            <th scope="row">${lineup.name}</th>
            <td><img id="lineup-ability"></td>
            <td>
              <img src=${lineup.images[0] === undefined ? "" : lineup.images[0]} class="map-lineup-images">
              <img src=${lineup.images[1] === undefined ? "" : lineup.images[1]} class="map-lineup-images">
              <img src=${lineup.images[2] === undefined ? "" : lineup.images[2]} class="map-lineup-images">
            </td>
            <td>
              ${ lineup.url === "" ? "No Video Provided" :
              `<div class="embed-responsive embed-responsive-16by9">
                <iframe class="embed-responsive-item" src="${lineup.url}" allowfullscreen></iframe>
              </div>`
              }
            </td>
          </tr>`;
          const lineupAbilityEl = document.getElementById('lineup-ability');
          abilities.forEach(function(a) {
            if (a._id === lineup.ability) return lineupAbilityEl.src = `${a.icon}`;
          });
        })();

        break;
      }
    }
  }

  function distance(point1, point2) {
    const dx = point2.x - point1.x;
    const dy = point2.y - point1.y;
    return Math.sqrt(dx * dx + dy * dy);
  }

  canvas.addEventListener("click", handleClick);
  canvas.addEventListener("mousedown", handleMouseDown);
  canvas.addEventListener("mousemove", handleMouseMove);
  // canvas.addEventListener("mouseup", handleMouseUp);
</script>

<%- include('../partials/footer') %>
