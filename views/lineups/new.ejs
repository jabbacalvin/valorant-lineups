<%- include('../partials/header') %>
  <div class="container-fluid">
    <form id="new-form" action="/lineups" method="POST">
      <div class="row">
        <div class="col-lg-6 col-md-6">
          <div class="row">
            <div class="col-lg-6 col-md-6">
              <div class="mb-3">
                <label for="formGroupExampleInput" class="form-label text-white">Name Lineup</label>
                <input type="text" class="form-control" id="formGroupExampleInput" placeholder="He's defusing!" name="name" />
              </div>
              <div class="mb-3">
                <label for="formFileMultiple" class="form-label text-white">Upload Images</label>
                <input class="form-control" type="file" id="formFileMultiple" multiple name="image" />
              </div>
              <div class="mb-3">
                <label for="basic-url" class="form-label text-white">Youtube URL</label>
                <div class="input-group">
                  <span class="input-group-text" id="basic-addon3">Youtube</span>
                  <input type="text" class="form-control" id="basic-url" name="url" />
                </div>
              </div>
            </div>
            <div class="col-lg-6 col-md-6">
              <label for="" class="text-white">Select Map</label>
              <select id="map-select" class="form-select form-select-lg mb-3" name="map" placeholder="Map">
                <option selected placeholder="Maps"></option>
                <%- maps.map(m=> `
                  <option value="${m._id}">${m.name}</option>
                  `).join('') %>
              </select>

              <label class="text-white">Select Agent</label>
              <select id="agent-select" class="form-select form-select-lg mb-3" name="agent">
                <option selected placeholder="Select Agent"></option>
                <%- agents.map(a=> `
                  <option value="${a._id}">${a.name}</option>
                  `).join('') %>
              </select>
              
              <label class="text-white">Select Abilities</label>
              <select id="ability-select" class="form-select form-select-lg mb-3" name="ability" disabled>
                <option selected placeholder="Select Ability"></option>
              </select>
            </div>
          </div>
          <div class="d-grid gap-2">
            <button class="btn btn-primary form-control" type="submit">Submit</button>
          </div>
        </div>
        <div class="col-lg-6 col-md-6">
          <div id="canvas-container">
            <img id="minimap-img" hidden />
            <canvas id="minimap-canvas"></canvas>
          </div>
        </div>
      </div>
    </form>
  </div>

  <script>
    const mapSelectEl = document.getElementById("map-select");
    const minimapEl = document.getElementById("minimap-img");
    const agentSelectEl = document.getElementById("agent-select");
    const abilitySelectEl = document.getElementById("ability-select");
    agentSelectEl.addEventListener("change", async function (e) {
      abilitySelectEl.removeAttribute("disabled");
      abilitySelectEl.innerHTML = '';
      let agentId = e.target.value;
      let response = await fetch(`/api/lineups/${agentId}`);
      let data = await response.json();
      data.forEach(function (a) {
        abilitySelectEl.innerHTML += `<option value='${a._id}'> ${a.name} </option>`
      });
    });

    const canvas = document.getElementById('minimap-canvas');
    const ctx = canvas.getContext('2d');
    const anchorPairs = [];
    let hasAnchorPairBeenAdded = false;
    let isDragging = false;
    let selectedAnchorPairIndex = -1;
    let selectedAnchorIndex = -1;

    const image = new Image();
    image.onload = drawImageAndAnchors;

    mapSelectEl.addEventListener("change", async function (e) {
      let mapId = e.target.value;
      let response = await fetch(`/api/maps/${mapId}`);
      let data = await response.json();
      minimapEl.src = data.minimap;

      image.src = document.getElementById("minimap-img").src;
    });

    function drawImageAndAnchors() {
      const { naturalWidth, naturalHeight } = image;
      canvas.width = naturalWidth;
      canvas.height = naturalHeight;

      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.drawImage(image, 0, 0);
      drawAnchorPairs();
    }

    function drawAnchorPairs() {
      anchorPairs.forEach((pair, pairIndex) => {
        const anchor1 = pair.anchor1;
        const anchor2 = pair.anchor2;
        const isSelected = pairIndex === selectedAnchorPairIndex;

        ctx.beginPath();
        ctx.moveTo(anchor1.x, anchor1.y);
        ctx.lineTo(anchor2.x, anchor2.y);
        ctx.strokeStyle = isSelected ? "orange" : pair.lineColor;
        ctx.lineWidth = 2;
        ctx.stroke();

        [anchor1, anchor2].forEach((anchor) => {
          if (anchor.isVisible) {
            ctx.fillStyle = isSelected ? "orange" : anchor.color;
            ctx.beginPath();
            ctx.arc(anchor.x, anchor.y, 10, 0, 2 * Math.PI);
            ctx.fill();
          }
        });
      });
    }

    function addAnchorPair() {
      const newAnchorPair = {
        anchor1: { x: 500, y: 500, color: "red", isVisible: true },
        anchor2: { x: 600, y: 600, color: "blue", isVisible: true },
        lineColor: "black",
      };
      anchorPairs.push(newAnchorPair);
      drawImageAndAnchors();
    }

    function deleteAnchorPair() {
      if (selectedAnchorPairIndex !== -1) {
        anchorPairs.splice(selectedAnchorPairIndex, 1);
        selectedAnchorPairIndex = -1;
        drawImageAndAnchors();
      }
    }
    function savePoints() {
      if (selectedAnchorPairIndex === -1) {
        console.log("No selected lineup to save.");
        return;
      }

      const selectedAnchorPair = anchorPairs[selectedAnchorPairIndex];

      const lineupData = {
        id: generateUniqueId(),
        anchorPairs: [
          {
            anchor1: { ...selectedAnchorPair.anchor1 },
            anchor2: { ...selectedAnchorPair.anchor2 },
            lineColor: selectedAnchorPair.lineColor,
          },
        ],
      };

      console.log("Saved Lineup:", lineupData);
    }

    function generateUniqueId() {
      return Date.now().toString() + Math.floor(Math.random() * 1000).toString();
    }

    function getMousePos(evt) {
      const rect = canvas.getBoundingClientRect();
      return {
        x: evt.clientX - rect.left,
        y: evt.clientY - rect.top,
      };
    }

    function handleMouseDown(evt) {
      const mousePos = getMousePos(evt);
      isDragging = false;

      for (let pairIndex = 0; pairIndex < anchorPairs.length; pairIndex++) {
        const { anchor1, anchor2 } = anchorPairs[pairIndex];

        if (
          Math.abs(mousePos.x - anchor1.x) <= 20 &&
          Math.abs(mousePos.y - anchor1.y) <= 20
        ) {
          isDragging = true;
          selectedAnchorPairIndex = pairIndex;
          selectedAnchorIndex = 0;
          break;
        } else if (
          Math.abs(mousePos.x - anchor2.x) <= 20 &&
          Math.abs(mousePos.y - anchor2.y) <= 20
        ) {
          isDragging = true;
          selectedAnchorPairIndex = pairIndex;
          selectedAnchorIndex = 1;
          break;
        }
      }
    }

    function handleMouseMove(evt) {
      if (!isDragging) return;

      const mousePos = getMousePos(evt);
      const pair = anchorPairs[selectedAnchorPairIndex];
      const anchor = pair[selectedAnchorIndex === 0 ? "anchor1" : "anchor2"];

      anchor.x = mousePos.x;
      anchor.y = mousePos.y;

      drawImageAndAnchors();
    }

    function handleMouseUp(evt) {
      if (isDragging) {
        isDragging = false;
      } else {
        selectedAnchorPairIndex = -1;
        selectedAnchorIndex = -1;
      }
    }

  </script>

  <%- include('../partials/footer') %>